#!/bin/bash
# bin/compile BUILD_DIR CACHE_DIR ENV_DIR
# https://devcenter.heroku.com/articles/buildpack-api#bin-compile

set -eo pipefail
set -o errtrace
set -o nounset



# parse and derive params
BUILDPACK_DIR=$(cd $(dirname $0); cd ..; pwd)
BUILD_DIR=$1
CACHE_DIR=$2
ENV_DIR=$3

function topic() {
  echo "-----> $*"
}

function error() {
  echo " !     $*" >&2
  exit 1
}

function indent() {
  c='s/^/       /'
  case $(uname) in
    Darwin) sed -l "$c";;
    *)      sed -u "$c";;
  esac
}

function read_var() {
  echo $(head -n 1 $1)
}

PROFILE_PATH="$1/.profile.d/libsndfile.sh"

echo "exporting PATH and LIBRARY_PATH" | indent
mkdir -p $(dirname $PROFILE_PATH)

echo 'export PATH="$PATH:$HOME/vendor/bin"' >> $PROFILE_PATH
echo 'export LD_LIBRARY_PATH="$LD_LIBRARY_PATH:$HOME/vendor/lib"' >> $PROFILE_PATH

mkdir -p "$1/vendor"
#export BUILD_DIR=$1"/vendor"
export PATH="$BUILD_DIR/bin:"$PATH
echo "-----> Building in $BUILD_DIR"


if [ -f "$2/vendor/bin/libsndfile" ]; then
	echo "Using cached build." | indent
	cp -R  "$2/vendor" $1
	exit 0
fi

# begin lame

echo "-----> Starting libsndfile compilation"
echo "Downloading libsndfile-1.0.28.tar.gz" | indent
wget --quiet https://s3-eu-west-1.amazonaws.com/soundtracktor-public/libsndfile-1.0.28.tar.gz
echo "Unpacking libsndfile" | indent
tar -xf libsndfile-1.0.28.tar.gz
cd libsndfile-1.0.28
echo "Running configure" | indent
./configure --prefix="$BUILD_DIR" >/dev/null 2>&1
echo "Running make with target install" | indent
make install >/dev/null 2>&1
echo "Running make with target distclean" | indent
make distclean > /dev/null 2>&1

echo "-----> Caching build."
mkdir -p $2
cp -R "$BUILD_DIR/" $2

cd ..





# parse and derive params
BUILDPACK_DIR=$(cd $(dirname $0); cd ..; pwd)
BUILD_DIR=$1
CACHE_DIR=$2
ENV_DIR=$3

#----------------------------------------------------------------------

# import supporting script
source "${BUILDPACK_DIR}/bin/script-common"

# derive number from stack (heroku-18, heroku-20)
HEROKU_STACK=${STACK:7}

# check if it's supported
if [[ ! $HEROKU_STACK =~ (18|20) ]]; then
  echo
  error "ERROR: This buildpack is NOT intended for use with the '${STACK}' stack"
  echo
  info "The supported stacks are 'heroku-18' and 'heroku-20'."
  echo
  info "Use the 'heroku stack:set' CLI command to set the appropriate stack."
  info "See https://devcenter.heroku.com/articles/stack"
  echo
  info "Optionally, for greater control and flexibility consider using the Heroku"
  info "container stack together with the heroku-docker-r implementation."
  info "See https://github.com/virtualstaticvoid/heroku-docker-r for more information."
  echo
  exit 1
fi

# ensure current directory is the build location
# this is where the application files will be located
# and so relative paths can be used
cd "$BUILD_DIR"

if [ "$BUILD_DIR" == "/app" ]; then
  info "INFO: build directory is /app!"
fi

# load any application defined environment variables,
# so that they can be accessed by this script
export_env_dir "$ENV_DIR"

# enable script debugging
# set via heroku config:set BUILDPACK_DEBUG=1
if [ ! -z ${BUILDPACK_DEBUG+x} ] && [ "$BUILDPACK_DEBUG" == "1" ]; then
  topic "Enabling script debugging"
  set -x # debug
  uname --all | indent
  set | indent
fi

#----------------------------------------------------------------------

topic "Installing R"

# debug
START_TIME="$(date -u +%s)"

# define static vars
BUILDPACK_NAME=heroku-buildpack-r
R_VERSION=4.0.0

# NB: undocumented feature ~ used for testing different versions
# E.g. set via heroku config:set BUILDPACK_VERSION=test
BUILDPACK_VERSION=${BUILDPACK_VERSION:-latest}

# NB: change to bust cache
CACHE_KEY="${BUILDPACK_VERSION}-${HEROKU_STACK}-$(cat "${BUILDPACK_DIR}/bin/cache_key")"

# get cache file names
cache_filename_for rootfs.tar.gz ROOTFS_OUTPUTS
cache_filename_for sitelibrary.tar.gz BUILD_OUTPUTS
cache_filename_for packrat.tar.gz PACKRAT_OUTPUTS
cache_filename_for renv.tar.gz RENV_OUTPUTS

# look for init.R
if [ -f init.R ]; then
  INIT_FILE=init.R
elif [ -f init.r ]; then
  INIT_FILE=init.r
else
  unset INIT_FILE
fi

#----------------------------------------------------------------------
# download archives

echo "Version ${R_VERSION} will be installed." | indent

topic "Downloading buildpack archives from AWS S3"

# deploy image (R/*, tcltk/*, etc)
fetch $(s3_url $(deploy_archive)) deploy.tar.gz deploy_image
tar xf $deploy_image

# figure out additional bits
# NB: should match logic in detect script
if [ -f run.R ]; then

  # shiny
  fetch $(s3_url $(shiny_archive)) shiny.tar.gz shiny_image
  tar xf $shiny_image

elif [ -f app.R ] || [ -f plumber.R ]; then

  # plumber
  fetch $(s3_url $(plumber_archive)) plumber.tar.gz plumber_image
  tar xf $plumber_image

fi

#----------------------------------------------------------------------
# setup for slug build

# make relative symlinks to R executables
mkdir -p bin
(
  cd bin
  ln -s ../R/bin/R .
  ln -s ../R/bin/Rscript .
)

# Rprofile.site for further configuration of R
cp -f "${BUILDPACK_DIR}/bin/Rprofile.site" R/lib/R/etc/Rprofile.site

# installation helpers script
cp -f "${BUILDPACK_DIR}/bin/helpers.R" R/etc/helpers.R

# dependent library helper
cp -f "${BUILDPACK_DIR}/bin/copy_libs.rb" R/etc/copy_libs.rb

# patch CRAN_MIRROR if provided
# E.g. set via heroku config:set CRAN_MIRROR=https://cran.example.org/
if [ ! -z ${CRAN_MIRROR+x} ]; then
  echo "Setting CRAN mirror to $CRAN_MIRROR" | indent
  sed -i "s#https://cloud.r-project.org/#${CRAN_MIRROR}#g" R/etc/Rprofile.site
fi

# packrat and renv paths
mkdir -p .config/packrat R/packrat R/renv

#----------------------------------------------------------------------
# restore cached outputs

# restore cached outputs
if [ -f "$BUILD_OUTPUTS" ]; then
  echo "Restoring R packages from cache" | indent
  tar xf "$BUILD_OUTPUTS"
fi

if [ -f packrat/init.R ] && [ -f "$PACKRAT_OUTPUTS" ]; then
  echo "Restoring packrat packages from cache" | indent
  tar xf "$PACKRAT_OUTPUTS"
fi

if [ -f renv/activate.R ] && [ -f "$RENV_OUTPUTS" ]; then
  echo "Restoring renv packages from cache" | indent
  tar xf "$RENV_OUTPUTS"
fi

delete_download=0

if [ -f "$ROOTFS_OUTPUTS" ]; then
  echo "Setting up build environment from cache" | indent
  build_image=$ROOTFS_OUTPUTS
else
  echo "Setting up build environment" | indent
  fetch $(s3_url $(build_archive)) build.tar.gz build_image
  delete_download=1
fi

# install to temp location
ROOTFS=$(mktemp -d)
mkdir -p $ROOTFS
(
  cd $ROOTFS
  tar xf $build_image
)

# delete cached download?
if [ "$delete_download" == "1" ] && [ -z ${BUILDPACK_TEST+x} ]; then
  rm $build_image
fi

#----------------------------------------------------------------------
# sync files to /app from BUILD_DIR (if needed)
# https://github.com/virtualstaticvoid/heroku-buildpack-r/issues/151

if [ "$BUILD_DIR" != "/app" ]; then

  topic "Configuring build environment..."

  #
  # it isn't possible to mount BUILD_DIR into the chroot as /app directory since
  # this is a locked down environment, so fakechroot via the FAKECHROOT_EXCLUDE_PATH
  # allows a "pass through" mechanism making it possible to simulate mounting a directory.
  #
  # unfortunately, slug compilation occurs under /build/... so to get this to work
  # all the files need to be copied to /app so that paths and symlinks work as expected
  # during slug compilation and ultimately are correct in the runtime environment.
  #
  # there are a bunch of Heroku files in /app, seemingly related to slug compilation
  # so these files will need to be excluded, after the R bits have been compiled and
  # the files are copied back to /build/...
  #
  # not the greatest situation, but hey it works
  #

  # make inventory of current contents of /app (before sync)
  # so when copied back, these files can be excluded
  (
    cd /app
    find . -maxdepth 1 -type d | grep -v '^.$' | cut -c 2- > "${BUILD_DIR}/.rsync-excludes"
    find . -maxdepth 1 -type f | cut -c 2- >> "${BUILD_DIR}/.rsync-excludes"
  )

  # copy everything to /app
  rsync -a "${BUILD_DIR}/" /app/

fi

#----------------------------------------------------------------------
# slug compile

# look for Aptfile; install the packages contained
if [ -f Aptfile ]; then
  echo
  notice "WARNING: Use of the Aptfile file is NOT recommended and will be deprecated in future."
  echo
  info "For greater control and flexibility consider using the Heroku"
  info "container stack together with the heroku-docker-r implementation."
  info "See https://github.com/virtualstaticvoid/heroku-docker-r for more information."
  echo

  packages=""
  while IFS='' read -r package || [[ -n "$package" ]]; do
    packages="$packages $package"
  done < Aptfile

  in_chroot_sudo /bin/bash -e -c "DEBIAN_FRONTEND=noninteractive apt-get update -qq" 2>&1 | indent
  in_chroot_sudo /bin/bash -e -c "DEBIAN_FRONTEND=noninteractive apt-get -qy install $packages" 2>&1 | indent
  in_chroot_sudo /bin/bash -e -c "DEBIAN_FRONTEND=noninteractive apt-get -q clean" 2>&1 > /dev/null
  in_chroot_sudo rm -rf /var/lib/apt/lists/* 2>&1 > /dev/null
fi

# execute init.R
if [ ! -z ${INIT_FILE+x} ]; then
  topic "Executing ${INIT_FILE} file"
  in_chroot /bin/bash -e -c "cd /app && /app/R/bin/R --no-save --quiet --slave --file=${INIT_FILE}" 2>&1 | indent
  in_chroot /usr/bin/ruby /app/R/etc/copy_libs.rb "/app/R/site-library/**/*.so" 2>&1 > /dev/null
fi

# bootstrap packrat?
if [ -f packrat/init.R ]; then
  topic "Bootstrapping packrat"
  in_chroot /bin/bash -e -c "cd /app && /app/R/bin/R --no-init-file --no-save --quiet --slave --file=packrat/init.R --args --bootstrap-packrat" 2>&1 | indent
  in_chroot /usr/bin/ruby /app/R/etc/copy_libs.rb "/app/packrat/**/*.so" 2>&1 > /dev/null
fi

# renv packrat?
if [ -f renv/activate.R ]; then
  topic "Bootstrapping renv"
  in_chroot /bin/bash -e -c "cd /app && /app/R/bin/R --no-save --quiet --slave -e 'renv::restore()'" 2>&1 | indent
  in_chroot /usr/bin/ruby /app/R/etc/copy_libs.rb "/app/renv/**/*.so" 2>&1 > /dev/null
fi

#----------------------------------------------------------------------
# final bits

topic "Finalising environment..."

# system dependencies
in_chroot /usr/bin/ruby /app/R/etc/copy_libs.rb "/app/R/lib/R/bin/exec/R" 2>&1 > /dev/null
in_chroot /usr/bin/ruby /app/R/etc/copy_libs.rb "/app/R/lib/**/*.so" 2>&1 > /dev/null

if [ "$BUILD_DIR" != "/app" ]; then

  # copy new and changed files back from /app (excluding original contents of /app)
  (
    cd /app
    rsync -a --exclude-from="${BUILD_DIR}/.rsync-excludes" . "${BUILD_DIR}/"
  )
  rm .rsync-excludes

fi

# for backward compatibility, include wrappers for fakechroot, fakeroot and chroot
cp "${BUILDPACK_DIR}/bin/wrap_fakechroot" bin/fakechroot
cp "${BUILDPACK_DIR}/bin/wrap_fakeroot" bin/fakeroot
cp "${BUILDPACK_DIR}/bin/wrap_chroot" bin/chroot

# clean ups (remove unneeded files, etc)
rm -rf fakechroot
rm R/etc/copy_libs.rb

#----------------------------------------------------------------------
# environment

# copy over profile
topic "Writing environment to profile"
mkdir -p .profile.d
cp "${BUILDPACK_DIR}/bin/env.sh" .profile.d/heroku-buildpack-r-env.sh

# include meta variables
cat >> .profile.d/heroku-buildpack-r-env.sh <<EOL
export BUILDPACK_NAME="$BUILDPACK_NAME"
export BUILDPACK_VERSION="$BUILDPACK_VERSION"
export BUILDPACK_R_VERSION="$R_VERSION"
EOL

# write export script for other buildpacks
cp "${BUILDPACK_DIR}/bin/env.sh" "${BUILDPACK_DIR}/export"

#----------------------------------------------------------------------
# cache outputs

topic "Caching build outputs"

(
  cd "$ROOTFS"
  compress "Build environment..." "$ROOTFS_OUTPUTS" --exclude-from="${BUILDPACK_DIR}/bin/.chroot_ignore" .
)

compress "R packages..." "$BUILD_OUTPUTS" --exclude-from="${BUILDPACK_DIR}/bin/.r_ignore" R/site-library

if [ -f packrat/init.R ]; then
  compress "packrat packages..." "$PACKRAT_OUTPUTS" --exclude-from="${BUILDPACK_DIR}/bin/.packrat_ignore" packrat R/packrat .config/packrat
fi

if [ -f renv/activate.R ]; then
  compress "renv packages..." "$RENV_OUTPUTS" --exclude-from="${BUILDPACK_DIR}/bin/.renv_ignore" renv R/renv
fi

#----------------------------------------------------------------------
# done

topic "R ${R_VERSION} installed successfully!"

# debug
END_TIME="$(date -u +%s)"
ELAPSED="$(($END_TIME-$START_TIME))"
echo "Install took $ELAPSED seconds to complete" | indent
